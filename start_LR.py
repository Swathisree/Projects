# -*- coding: utf-8 -*-
"""DNA_script.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hVBSaAUR3pw5aLwlB4o2w2BNrSf7iT91
"""

from os import path

# %matplotlib inline

import pandas as pd
import numpy as np

import csv

x_tr0, x_te0, y_tr0 = [], [], []
filename = "Xtr0_mat100.csv"
with open(filename, 'r') as f:
    spamreader = f.readlines()
    for row in spamreader:
        x_tr0.append([float(x) for x in row.rstrip().split(' ')])

filename = "Xte0_mat100.csv"   
with open(filename, 'r') as f:
    spamreader = f.readlines()
    for row in spamreader:
        x_te0.append([float(x) for x in row.rstrip().split(' ')])

filename = "Ytr0.csv"           
with open(filename, 'r') as f:
    spamreader = f.readlines()
    spamreader = spamreader[1:]
    for row in spamreader:
        y_tr0.append(int(row.rstrip().split(",")[1]))
        
x_tr1, x_te1, y_tr1 = [], [], []
filename = "Xtr1_mat100.csv"
with open(filename, 'r') as f:
    spamreader = f.readlines()
    for row in spamreader:
        x_tr1.append([float(x) for x in row.rstrip().split(' ')])

filename = "Xte1_mat100.csv"   
with open(filename, 'r') as f:
    spamreader = f.readlines()
    for row in spamreader:
        x_te1.append([float(x) for x in row.rstrip().split(' ')])

filename = "Ytr1.csv"   

with open(filename, 'r') as f:
    spamreader = f.readlines()
    spamreader = spamreader[1:]
    for row in spamreader:
        y_tr1.append(int(row.rstrip().split(",")[1]))

x_tr2, x_te2, y_tr2 = [], [], []
filename = "Xtr2_mat100.csv"
with open(filename, 'r') as f:
    spamreader = f.readlines()
    for row in spamreader:
        x_tr2.append([float(x) for x in row.rstrip().split(' ')])

filename = "Xte2_mat100.csv"   
with open(filename, 'r') as f:
    spamreader = f.readlines()
    for row in spamreader:
        x_te2.append([float(x) for x in row.rstrip().split(' ')])

filename = "Ytr2.csv"           
with open(filename, 'r') as f:
    spamreader = f.readlines()
    spamreader = spamreader[1:]
    for row in spamreader:
        y_tr2.append(int(row.rstrip().split(",")[1]))

class LogisticRegression:
    def __init__(self, lr=0.01, num_iter=100000, fit_intercept=True, verbose=False):
        self.lr = lr
        self.num_iter = num_iter
        self.fit_intercept = fit_intercept
        self.verbose = verbose
    
    def __add_intercept(self, X):
        intercept = np.ones((X.shape[0], 1))
        return np.concatenate((intercept, X), axis=1)
    
    def __sigmoid(self, z):
        return 1 / (1 + np.exp(-z))
    def __loss(self, h, y):
        return (-y * np.log(h) - (1 - y) * np.log(1 - h)).mean()
    
    def fit(self, X, y):
        if self.fit_intercept:
            X = self.__add_intercept(X)
        
        # weights initialization
        self.theta = np.zeros(X.shape[1])
        
        for i in range(self.num_iter):
            z = np.dot(X, self.theta)
            h = self.__sigmoid(z)
            gradient = np.dot(X.T, (h - y)) / y.size
            self.theta -= self.lr * gradient
            
            z = np.dot(X, self.theta)
            h = self.__sigmoid(z)
            loss = self.__loss(h, y)
                
            if(self.verbose ==True and i % 10000 == 0):
                print('loss: {loss} \t')
    
    def predict_prob(self, X):
        if self.fit_intercept:
            X = self.__add_intercept(X)
    
        return self.__sigmoid(np.dot(X, self.theta))
    
    def predict(self, X):
        return self.predict_prob(X).round()

model = LogisticRegression(lr=0.1, num_iter=300000)

X = np.array(x_tr0)
y = np.array(y_tr0)
model.fit(X, y)

z = np.array(x_te0)

preds0 = model.predict(z)

X = np.array(x_tr1)
y = np.array(y_tr1)
model.fit(X, y)

z = np.array(x_te1)

preds1 = model.predict(z)

X = np.array(x_tr2)
y = np.array(y_tr2)
model.fit(X, y)

z = np.array(x_te2)

preds2 = model.predict(z)

c = 0
with open("Yte.csv", "w") as f:
  f.write(str("Id,Bound\n"))
  for val in preds0:
    f.write(str(c) + ","+ str(int(val)) + "\n")
    c += 1
  
  for val in preds1:
      f.write(str(c) + ","+ str(int(val)) + "\n")
      c += 1

  for val in preds2:
      f.write(str(c) + ","+ str(int(val)) + "\n")
      c += 1



