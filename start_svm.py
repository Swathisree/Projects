# -*- coding: utf-8 -*-
"""last_version.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1M92J3xCsJz6cQbeb9cqTqHX3CWizYWz2
"""

from os import path

import pandas as pd
import numpy as np
from numpy import linalg
import cvxopt
import cvxopt.solvers

"""### Read data"""

data_dir = './'

x_tr = pd.concat([pd.read_csv('Xtr'+str(k)+'.csv') for k in range(3)], axis=0)
x_te = pd.concat([pd.read_csv('Xte'+str(k)+'.csv') for k in range(3)], axis=0)
y_tr = pd.concat([pd.read_csv('Ytr'+str(k)+'.csv') for k in range(3)], axis=0)

x_tr.head()

"""### Train model, search hyperparameters"""

def gaussian_kernel(x, y, sigma=5.0):
    return np.exp(-linalg.norm(x - y) ** 2 / (2 * (sigma ** 2)))


class SVM(object):
    def __init__(self, kernel=gaussian_kernel, C=None):
        self.kernel = kernel
        self.C = C
        if self.C is not None: self.C = float(self.C)

    def fit(self, X, y):
        n_samples, n_features = X.shape

        # Gram matrix
        K = np.zeros((n_samples, n_samples))
        for i in range(n_samples):
            for j in range(n_samples):
                K[i, j] = self.kernel(X[i], X[j])

        P = cvxopt.matrix(np.outer(y,y) * K)
        q = cvxopt.matrix(np.ones(n_samples) * -1)
        A = cvxopt.matrix(y, (1,n_samples), 'd')
        b = cvxopt.matrix(0.0)

        if self.C is None:
            G = cvxopt.matrix(np.diag(np.ones(n_samples) * -1))
            h = cvxopt.matrix(np.zeros(n_samples))
        else:
            tmp1 = np.diag(np.ones(n_samples) * -1)
            tmp2 = np.identity(n_samples)
            G = cvxopt.matrix(np.vstack((tmp1, tmp2)))
            tmp1 = np.zeros(n_samples)
            tmp2 = np.ones(n_samples) * self.C
            h = cvxopt.matrix(np.hstack((tmp1, tmp2)))

        # solve QP problem
        solution = cvxopt.solvers.qp(P, q, G, h, A, b)

        # Lagrange multipliers
        a = np.ravel(solution['x'])

        # Support vectors have non zero lagrange multipliers
        sv = a > 1e-5
        ind = np.arange(len(a))[sv]
        self.a = a[sv]
        self.sv = X[sv]
        self.sv_y = y[sv]

        # Intercept
        self.b = 0
        for n in range(len(self.a)):
            self.b += self.sv_y[n]
            self.b -= np.sum(self.a * self.sv_y * K[ind[n],sv])
        self.b /= len(self.a)

        # Weight vector
        self.w = None

    def project(self, X):
        y_predict = np.zeros(len(X))
        for i in range(len(X)):
            s = 0
            for a, sv_y, sv in zip(self.a, self.sv_y, self.sv):
                s += a * sv_y * self.kernel(X[i], sv)
            y_predict[i] = s
        return y_predict + self.b

    def predict(self, X):
        return np.sign(self.project(X))

class NGramTransformer:
    def __init__(self, n):
        self.n = n
        self.ngram2idx = dict()
        self.n_features = None
        self.ngram2count = dict()
        self.total_documents = None
        
    def fit_transform(self, x):
        # collect ngrams
        self.total_documents = len(x)
        for seq in x: # for each sequence in data
            for idx_start in range(0, len(seq) - self.n + 1): # for each index from 0 to len(seq) - n + 1
                ngram = seq[idx_start: idx_start + self.n] # take letters from idx_start to idx_start + n
                if ngram not in self.ngram2idx: # if not collected
                    self.ngram2idx[ngram] = len(self.ngram2idx) # assign new index to it
        # collect document frequencyv
        for seq in x:
            for ngram in self.ngram2idx:
                if ngram in seq: # for each ngram collected
                    if ngram in self.ngram2count: # either add one to document count
                        self.ngram2count[ngram] += 1
                    else:
                        self.ngram2count[ngram] = 1 # or assign one if firstly met

        self.n_features = len(self.ngram2idx)
        return self.transform(x)
        
    def transform(self, x):
        matr = np.zeros([len(x), self.n_features], dtype=np.float32)
        for i, seq in enumerate(x):
            for idx_start in range(0, len(seq) - self.n + 1):
                ngram = seq[idx_start: idx_start + self.n] # take letters from idx_start to idx_start + n
                if ngram in self.ngram2idx:
                    matr[i, self.ngram2idx[ngram]] += 1 / (len(seq) - self.n + 1) \
                                                      * (1 + np.log((self.total_documents + 1) \
                                                      / (self.ngram2count[ngram] + 1)))
        return matr

class Scaler:
    def __init__(self):
        self.std = None
        self.mean = None
        
    def fit_transform(self, x):
        self.mean = np.mean(x, axis=0)
        self.std = np.std(x, axis=0, ddof=1)
        return self.transform(x)
    
    def transform(self, x):
        return (x - self.mean.reshape(1, -1)) / self.std.reshape(1, -1)

vectorizer = NGramTransformer(3)
x_tr_num = vectorizer.fit_transform(x_tr['seq'])
y_tr_num = y_tr['Bound'].values

scaler = Scaler()
x_tr_final = scaler.fit_transform(x_tr_num)


sigma = 1 / np.sqrt(2 * 0.1) # calculated sigma

def accuracy_score(y_true, y_pred):
    return np.sum(y_true == y_pred) / len(y_pred)


model = SVM(lambda x, y: gaussian_kernel(x, y, sigma), C=1.4)
model.fit(x_tr_final, 2 * y_tr_num - 1) # convert [1, 1, 0, ..0] to [1, 1, -1, ..-1]
x_te_final = scaler.transform(vectorizer.transform(x_te['seq']))
y_pred = (model.predict(x_te_final) > 0).astype(int)
#print(accuracy_score(y_tr_num[te_ind], y_pred))

"""### Make final predictions"""

c = 0
with open("Yte.csv", "w") as f:
  f.write(str("Id,Bound\n"))
  for val in y_pred:
    f.write(str(c) + ","+ str(int(val)) + "\n")
    c += 1

